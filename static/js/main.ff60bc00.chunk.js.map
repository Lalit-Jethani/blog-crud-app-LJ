{"version":3,"sources":["logo.svg","constants/constants.js","redux/actions/index.js","FallBack.jsx","components/NewPost.jsx","components/Post.jsx","App.js","redux/reducers/blogReducer.js","redux/reducers/index.js","components/EditPost.jsx","components/FullPost.jsx","containers/postList.js","components/DeleteAllPosts.jsx","components/Header.js","Routes.jsx","index.js"],"names":["SERVICE_URL","fetchPostSuccess","successData","dispatch","type","payload","data","fetchPostFail","error","DataLoading","isLoading","a","createPostSucess","CreatePostFail","DeletePostFail","deletePostSuccess","editPostFail","deleteAllPostsSuccess","fetchSinglePostSucess","Fallback","state","isError","this","setState","React","Component","NewPost","useDispatch","useState","title","text","form","setForm","handleInputChange","e","prev","target","name","value","handleReset","className","onSubmit","body","preventDefault","trim","axios","post","then","catch","required","placeholder","onChange","rows","cols","BlogList","history","useHistory","posts","useSelector","blogReducer","map","onClick","id","push","fromNow","date","App","isRefreshed","useEffect","get","Post","initialState","singlePost","status","combineReducers","action","response","isEdited","message","EditPost","props","editForm","setEditForm","handleSubmit","isEditing","defaultValue","withRouter","postID","match","params","delete","DeleteAllPosts","to","location","pathname","Routes","exact","path","ReactDOM","render","store","createStore","reducers","applyMiddleware","thunk","document","getElementById"],"mappings":"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","file":"static/js/main.ff60bc00.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export  const SERVICE_URL = ' https://salesforce-blogs.herokuapp.com/';","/**\n * @param  {} successData\n * @param  {} dispatch\n * @param  {'FETCH_POST_SUCCESS'} =>{dispatch(({type\n * @param  {successData.data}} payload\n * @returns id\n */\n\nimport {SERVICE_URL} from '../../constants/constants';\nimport axios from 'axios';\n /**\n  * @param  {} successData\n  * @param  {} dispatch\n  * @param  {'FETCH_POST_SUCCESS'} =>{dispatch(({type\n  * @param  {successData.data}} payload\n  */\n export const fetchPostSuccess = (successData, dispatch) => {\n    //this.fetchPostLoading(false);\n    dispatch(( {\n        type : 'FETCH_POST_SUCCESS',\n        payload : successData.data\n        } ))\n}\n/**\n * @param  {} error\n * @param  {} dispatch\n * @param  {'FETCH_POST_ERROR'} =>{dispatch(({type\n * @param  {error}} payload\n */\nexport const fetchPostFail = (error, dispatch) => {\n    //this.fetchPostLoading(false);\n    dispatch(( {\n        type : 'FETCH_POST_ERROR',\n        payload : error\n        } ))\n}\n/**\n * @param  {} isLoading\n * @param  {} =>{returnasyncfunction(dispatch\n * @param  {'DATA_LOADING'} {dispatch({type\n * @param  {isLoading}} payload\n */\nexport const DataLoading = (isLoading) => {\n    return async function(dispatch) {\n        dispatch( {\n            type : 'DATA_LOADING',\n            payload : isLoading\n            } )\n }\n}\n /**\n  * @param  {} =>{returnasyncfunction(dispatch\n  * @param  {} {constSUFFIX_URL='blogs/api';dispatch(DataLoading(true\n  * @param  {} ;axios.get(`${SERVICE_URL}${SUFFIX_URL}`\n  * @param  {} .then((successData\n  * @param  {} =>{fetchPostSuccess(successData\n  * @param  {} dispatch\n  * @param  {} ;}\n  * @param  {} .catch((error\n  * @param  {} =>{fetchPostFail(error\n  * @param  {} dispatch\n  * @param  {} ;}\n  */\n export const fetchPostLoad = () => {\n    return async function(dispatch) {\n    const SUFFIX_URL = 'blogs/api';\n    dispatch(DataLoading(true));\n    axios.get(`${SERVICE_URL}${SUFFIX_URL}`).then((successData)=>{\n        fetchPostSuccess(successData, dispatch);\n    })\n    .catch((error)=>{\n        fetchPostFail(error, dispatch);\n    });\n    }\n }\n /**\n  * @param  {} successData\n  * @param  {} dispatch\n  * @param  {'CREATE_POST_SUCCESS'} =>{dispatch(({type\n  * @param  {successData.data}} payload\n  */\n export const createPostSucess = (successData, dispatch) => {\n    //this.fetchPostLoading(false);\n    dispatch(( {\n        type : 'CREATE_POST_SUCCESS',\n        payload : successData.data\n        } ))\n}\n/**\n * @param  {} error\n * @param  {} dispatch\n * @param  {'CREATE_POST_ERROR'} =>{dispatch(({type\n * @param  {error}} payload\n */\nexport const CreatePostFail = (error, dispatch) => {\n    //this.fetchPostLoading(false);\n    dispatch(( {\n        type : 'CREATE_POST_ERROR',\n        payload : error\n        } ))\n}\n\n /**\n  * @param  {} body\n  * @param  {} =>{returnasyncfunction(dispatch\n  * @param  {} {constSUFFIX_URL='blogs/api';dispatch(DataLoading(true\n  * @param  {} ;axios.post(`${SERVICE_URL}${SUFFIX_URL}`\n  * @param  {} body\n  * @param  {} .then((successData\n  * @param  {} =>{createPostSucess(successData\n  * @param  {} dispatch\n  * @param  {} ;}\n  * @param  {} .catch((error\n  * @param  {} =>{CreatePostFail(error\n  * @param  {} dispatch\n  * @param  {} ;}\n  */\n export const CreatePostLoad = (body) => {\n    return async function(dispatch) {\n    const SUFFIX_URL = 'blogs/api';\n    dispatch(DataLoading(true));\n    axios.post(`${SERVICE_URL}${SUFFIX_URL}`, body).then((successData)=>{\n        createPostSucess(successData, dispatch);\n    })\n    .catch((error)=>{\n        CreatePostFail(error, dispatch);\n    });\n    }\n }\n /**\n  * @param  {} error\n  * @param  {} dispatch\n  * @param  {'DELETE_POST_ERROR'} =>{dispatch(({type\n  * @param  {error}} payload\n  */\n export const DeletePostFail = (error, dispatch) => {\n    //this.fetchPostLoading(false);\n    dispatch(( {\n        type : 'DELETE_POST_ERROR',\n        payload : error\n        } ))\n}\n/**\n * @param  {} successData\n * @param  {} dispatch\n * @param  {'DELETE_POST_SUCCESS'} =>{dispatch(({type\n * @param  {successData.data}} payload\n */\nexport const deletePostSuccess = (successData, dispatch) => {\n    //this.fetchPostLoading(false);\n    dispatch(( {\n        type : 'DELETE_POST_SUCCESS',\n        payload : successData.data\n        } ))\n}\n/**\n * @param  {} id\n * @param  {} =>{returnasyncfunction(dispatch\n * @param  {} {constSUFFIX_URL='blogs/api';dispatch(DataLoading(true\n * @param  {} ;axios.delete(`${SERVICE_URL}${SUFFIX_URL}/${id}`\n * @param  {} .then((successData\n * @param  {} =>{deletePostSuccess(successData\n * @param  {} dispatch\n * @param  {} ;}\n * @param  {} .catch((error\n * @param  {} =>{DeletePostFail(error\n * @param  {} dispatch\n * @param  {} ;}\n */\n\n export const deletePostLoad = (id) => {\n    return async function(dispatch) {\n    const SUFFIX_URL = 'blogs/api';\n    dispatch(DataLoading(true));\n    axios.delete(`${SERVICE_URL}${SUFFIX_URL}/${id}`).then((successData)=>{\n        deletePostSuccess(successData, dispatch);\n    })\n    .catch((error)=>{\n        DeletePostFail(error, dispatch);\n    });\n    }\n }\n \n /**\n  * @param  {} error\n  * @param  {} dispatch\n  * @param  {'EDIT_POST_ERROR'} =>{dispatch(({type\n  * @param  {error}} payload\n  */\n export const editPostFail = (error, dispatch) => {\n    //this.fetchPostLoading(false);\n    dispatch(( {\n        type : 'EDIT_POST_ERROR',\n        payload : error\n        } ))\n}\n\n/**\n * @param  {} successData\n * @param  {} dispatch\n * @param  {'EDIT_POST_SUCCESS'} =>{dispatch(({type\n * @param  {successData.data}} payload\n */\nexport const editPostSucess = (successData, dispatch) => {\n    //this.fetchPostLoading(false);\n    dispatch(( {\n        type : 'EDIT_POST_SUCCESS',\n        payload : successData.data\n        } ))\n}\n/**\n * @param  {} successData\n * @param  {} dispatch\n * @param  {'DELETE_ALL_POST_SUCCESS'} =>{dispatch(({type\n * @param  {successData.data}} payload\n */\nexport const deleteAllPostsSuccess = (successData, dispatch) => {\n\n    dispatch(( {\n        type : 'DELETE_ALL_POST_SUCCESS',\n        payload : successData.data\n        } ))\n}\n/**\n * @param  {} successData\n * @param  {} dispatch\n * @param  {'FETCH_SINGLE_POST_SUCCESS'} =>{dispatch(({type\n * @param  {successData.data}} payload\n */\nexport const fetchSinglePostSucess = (successData, dispatch) => {\n    dispatch(( {\n        type : 'FETCH_SINGLE_POST_SUCCESS',\n        payload : successData.data\n        } ))\n}\n\n /**\n  * @param  {} data\n  * @param  {} =>{returnasyncfunction(dispatch\n  * @param  {} {constSUFFIX_URL='blogs/api';dispatch(DataLoading(true\n  * @param  {} ;axios.post(`${SERVICE_URL}${SUFFIX_URL}/${data.id}`\n  * @param  {} data\n  * @param  {} .then((successData\n  * @param  {} =>{fetchSinglePostSucess(successData\n  * @param  {} dispatch\n  * @param  {} ;}\n  * @param  {} .catch((error\n  * @param  {} =>{editPostFail(error\n  * @param  {} dispatch\n  * @param  {} ;}\n  */\n export const editPostLoad = (data) => {\n    return async function(dispatch) {\n    const SUFFIX_URL = 'blogs/api';\n    dispatch(DataLoading(true));\n    axios.post(`${SERVICE_URL}${SUFFIX_URL}/${data.id}`, data).then((successData)=>{\n        fetchSinglePostSucess(successData, dispatch);\n    })\n    .catch((error)=>{\n        editPostFail(error, dispatch);\n    });\n    }\n }\n /**\n  * @param  {} id\n  * @param  {} =>{returnasyncfunction(dispatch\n  * @param  {} {constSUFFIX_URL='blogs/api';dispatch(DataLoading(true\n  * @param  {} ;axios.get(`${SERVICE_URL}${SUFFIX_URL}/${id}`\n  * @param  {} .then((successData\n  * @param  {} =>{fetchSinglePostSucess(successData\n  * @param  {} dispatch\n  * @param  {} ;}\n  * @param  {} .catch((error\n  * @param  {} =>{editPostFail(error\n  * @param  {} dispatch\n  * @param  {} ;}\n  */\n export const fetchSinglePost = (id) => {\n    return async function(dispatch) {\n    const SUFFIX_URL = 'blogs/api';\n    dispatch(DataLoading(true));\n    axios.get(`${SERVICE_URL}${SUFFIX_URL}/${id}`).then((successData)=>{\n        fetchSinglePostSucess(successData, dispatch);\n    })\n    .catch((error)=>{\n        editPostFail(error, dispatch);\n    });\n    }\n }\n /**\n  * @param  {} id\n  * @param  {} =>{returnasyncfunction(dispatch\n  * @param  {} {constSUFFIX_URL='blogs/api';dispatch(DataLoading(true\n  * @param  {} ;axios.delete(`${SERVICE_URL}${SUFFIX_URL}`\n  * @param  {} .then((successData\n  * @param  {} =>{deleteAllPostsSuccess(successData\n  * @param  {} dispatch\n  * @param  {} ;}\n  * @param  {} .catch((error\n  * @param  {} =>{editPostFail(error\n  * @param  {} dispatch\n  * @param  {} ;}\n  */\n export const deleteAllPosts = (id) => {\n    return async function(dispatch) {\n    const SUFFIX_URL = 'blogs/api';\n    dispatch(DataLoading(true));\n    axios.delete(`${SERVICE_URL}${SUFFIX_URL}`).then((successData)=>{\n        deleteAllPostsSuccess(successData, dispatch);\n    })\n    .catch((error)=>{\n        editPostFail(error, dispatch);\n    });\n    }\n }\n /**\n  * @param  {} id\n  * @param  {\"EDIT_SELECTED\"} =>{return{type\n  * @param  {id}}} payload\n  * @returns id\n  */\n export const editSelected = (id) => {\n     return {\n         type:\"EDIT_SELECTED\",\n         payload:id\n     }\n }\n \n\n ","import React from 'react';\n\nexport default class Fallback extends React.Component {\n\n    state = {isError: false};\n    \n    componentDidCatch(error){\n        this.setState({isError:true})\n    }\n\n    render() {\n            return <div>\n                Network Error Occured.\n                Please Re Run this page or \n                contact the support Team.\n            </div>\n    }\n}","import React from 'react'\nimport { useDispatch } from 'react-redux';\nimport { CreatePostLoad } from '../redux/actions'\n\nconst NewPost = () => {\n\n    const dispatch = useDispatch();\n\n\n    const [form, setForm] = React.useState({\n        title: '',\n        text: ''\n    })\n\n    const handleInputChange = (e) => {\n        setForm((prev) => ({\n            ...prev,\n            [e.target.name]: e.target.value\n        }))\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (form.title.trim() && form.text.trim()) {\n            dispatch(CreatePostLoad(form))\n            handleReset();\n        }\n    };\n\n    const handleReset = () => {\n        setForm((prev) => ({\n            ...prev,\n            title: '',\n            text: ''\n        }))\n    };\n\n    return (\n        <div className=\"card border-0 rounded-0 shadow\">\n            <div className=\"card-body\">\n                <h5 className=\"card-title text-center\">\n                    <span className=\"title-h5\">Post</span>\n                </h5>\n                <form onSubmit={handleSubmit}>\n                    <div className=\"form-group\">\n                        <input\n                            required\n                            type=\"text\"\n                            name=\"title\"\n                            value={form.title}\n                            placeholder=\"Enter title\"\n                            onChange={handleInputChange}\n                            className=\"form-control form-control-lg border border-secondary\"\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <textarea\n                            required\n                            rows=\"10\"\n                            cols=\"30\"\n                            name=\"text\"\n                            value={form.text}\n                            placeholder=\"Enter post\"\n                            onChange={handleInputChange}\n                            className=\"form-control form-control-lg border border-secondary\"\n                        />\n                    </div>\n                    <div className=\"form-group text-center\">\n                        <button\n                            type=\"submit\"\n                            className=\"btn btn-primary rounded pl-5 pr-5\"\n                        >\n                            Submit\n                            </button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n}\n\nexport default NewPost;","import React from 'react';\nimport Moment from 'react-moment';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\n// eslint-disable-next-line import/no-anonymous-default-export\n\nconst BlogList = ({ post }) => {\n    const history = useHistory();\n    const posts = useSelector(state => state.blogReducer.post)\n\n    const navigateToFullPost = (id) => {\n        history.push('/FullPost/' + id);\n    }\n    return (\n        posts.map((post) => {\n            return <div className=\"card border-0 rounded-0 mt-1 mb-2 shadow-sm\">\n                <div className=\"card-body\">\n                    <h5 className=\"card-title blog-title cursor-style\"\n                        onClick={() => navigateToFullPost(post.id)}>\n                        {post.title}\n                        <small className=\"text-muted float-right cursor-style\">\n                            <Moment fromNow>{post.date}</Moment>\n                        </small>\n                    </h5>\n                    <p className=\"card-text blog-body\">\n                        {post.text}\n                    </p>\n                </div>\n            </div>\n        })\n    );\n}\n\nexport default BlogList","import logo from './logo.svg';\nimport './App.css';\nimport React from 'react'\nimport { fetchPostLoad } from './redux/actions'\nimport { useDispatch, useSelector } from 'react-redux';\nimport FallBack from './FallBack';\nimport NewPost from '../src/components/NewPost';\nimport Post from '../src/components/Post'\n\n\nfunction App() {\n  const dispatch = useDispatch();\n  const isError = useSelector(state => state.blogReducer.isError)\n  const isLoading = useSelector(state => state.blogReducer.isLoading)\n  const isRefreshed = useSelector(state => state.blogReducer.isRefreshed)\n\nReact.useEffect(() => {\n    dispatch(fetchPostLoad())\n  }, [isRefreshed])\n\n  if (isError) {\n    return <FallBack />\n  }\n  return (\n\n\n\n    <div className=\"App\">\n\n      {isLoading ? <div id='loader'></div> : <div className=\"container-fluid\">\n        <div className=\"row mt-4\">\n          <div className=\"col-md-4 \">\n            <NewPost />\n          </div>\n          <div className=\"col-md-8\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <Post />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>}\n    </div>\n  );\n}\n\nexport default App;\n","// eslint-disable-next-line import/no-anonymous-default-export\nconst initialState = {\n    post: [],\n    error: {},\n    isError: false,\n    isLoading: false,\n    isRefreshed: false,\n    singlePost: {},\n    status: ''\n}\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default (state = initialState, action) => {\n\n    switch (action.type) {\n        /**\n         * @param  {} action.payload\n         * @param  {} ;return{...state\n         * @param  {action.payload} post\n         * @param  {false};case'FETCH_POST_ERROR':console.log(action.payload} isLoading\n         * @returns true\n         */\n        case 'FETCH_POST_SUCCESS':\n\n            return { ...state, post: action.payload, isLoading: false };\n\n        case 'FETCH_POST_ERROR':\n\n            return { ...state, error: action.payload.response, isError: true, isLoading: false };\n\n        case 'DATE_LOADING':\n\n            return { ...state, error: action.payload.response, isLoading: true };\n\n        case 'CREATE_POST_SUCCESS':\n\n            return { ...state, post: [...state.post, action.payload], isLoading: false };\n\n        case 'CREATE_POST_ERROR':\n\n            return { ...state, error: action.payload.response, isError: true, isLoading: false };\n\n\n        case 'DELETE_POST_SUCCESS':\n\n            return { ...state, isRefreshed: !state.isRefreshed, post: [...state.post, action.payload], isLoading: false };\n\n        case 'DELETE_POST_ERROR':\n\n            return { ...state, error: action.payload.response, isError: true, isLoading: false };\n\n\n        case \"EDIT_SELECTED\":\n            return {\n                ...state, singlePost: { ...state.singlePost, isEdited: true }\n            }\n\n        case 'EDIT_POST_SUCCESS':\n\n            return { ...state, isRefreshed: !state.isRefreshed, post: [...state.post, action.payload], isLoading: false };\n\n        case 'EDIT_POST_ERROR':\n\n            return { ...state, error: action.payload.response, isError: true, isLoading: false };\n\n        case 'FETCH_SINGLE_POST_SUCCESS':\n\n            return { ...state, singlePost: action.payload, isLoading: true };\n\n\n        case 'DELETE_ALL_POST_SUCCESS':\n\n            return { ...state, post: [], isRefreshed: !state.isRefreshed, status: action.payload.message, isLoading: false };\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport blogReducer from './blogReducer'\n\nexport default combineReducers({\n    blogReducer : blogReducer\n});","import React from 'react';\nimport { editPostLoad } from '../redux/actions'\nimport { useDispatch } from 'react-redux';\n\n\n\nconst EditPost = (props) => {\n    const dispatch = useDispatch();\n\n\n    const [editForm, setEditForm] = React.useState({\n        title: '',\n        text: '',\n        isEdited: false\n    })\n\n    React.useEffect(() => {\n        setEditForm({\n            title: props.post.title,\n            text: props.post.text,\n            isEdited: false,\n            id: props.post.id\n        })\n    }, [])\n\n    const handleInputChange = (e) => {\n        setEditForm((prev) => ({\n            ...prev,\n            [e.target.name]: e.target.value\n        }))\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (editForm.title.trim() && editForm.text.trim()) {\n            dispatch(editPostLoad(editForm))\n            // props.onUpdate({id: props.post.id, data: editForm});\n            handleReset();\n        }\n    };\n\n    const handleReset = () => {\n        setEditForm({\n            title: '',\n            text: '',\n            isEditing: false\n        });\n    };\n\n    return (\n        <div className=\"card border-0 rounded-0 shadow\">\n            <div className=\"card-body\">\n                <h5 className=\"card-title text-center\">\n                    <span className=\"title-h5\">Editing post</span>\n                </h5>\n                <form onSubmit={handleSubmit}>\n                    <div className=\"form-group\">\n                        <input\n                            required\n                            type=\"text\"\n                            name=\"title\"\n                            placeholder=\"Enter title\"\n                            onChange={handleInputChange}\n                            defaultValue={props.post.title}\n                            className=\"form-control form-control-lg border border-secondary\"\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <textarea\n                            required\n                            rows=\"3\"\n                            cols=\"30\"\n                            name=\"text\"\n                            placeholder=\"Enter post\"\n                            onChange={handleInputChange}\n                            defaultValue={props.post.text}\n                            className=\"form-control form-control-lg border border-secondary\"\n                        />\n                    </div>\n                    <div className=\"form-group text-center\">\n                        <button\n                            type=\"submit\"\n                            onClick={handleSubmit}\n                            className=\"btn btn-success rounded pl-5 pr-5\"\n                        >\n                            Update\n                            </button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n}\n\nexport default EditPost;\n","import React from 'react';\nimport Moment from 'react-moment';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deletePostLoad, editSelected, fetchSinglePost } from '../redux/actions'\nimport { useHistory, withRouter } from 'react-router-dom';\nimport EditPost from '../components/EditPost';\n\n\n// eslint-disable-next-line import/no-anonymous-default-export\nconst FullPost = (props) => {\n    const history = useHistory();\n    const dispatch = useDispatch()\n    const post = useSelector(state => state.blogReducer.singlePost)\n\n    const postID = props.match ? props.match.params.id : -1;\n\n    React.useEffect(() => {\n        dispatch(fetchSinglePost(postID))\n    }, [])\n\n\n    return (\n        post.isEdited ? <EditPost\n            post={post}\n        /> :\n            <div className=\"card border-0 rounded-0 mt-1 mb-2 shadow-sm\">\n                <div className=\"card-body\">\n                    <h5 className=\"card-title \">\n                        {post.title}\n                        <small className=\"text-muted float-right\">\n                            {<Moment fromNow>{post.date}</Moment>}\n                        </small>\n                    </h5>\n                    <p className=\"card-text blog-body-details \">\n                        {post.text}\n                    </p>\n                    <div className=\"float-right\">\n                        <button\n                            type=\"button\"\n                            onClick={() => dispatch(editSelected(post.id))}\n                            className=\"btn btn-info rounded pr-3 pl-3 mr-1\"\n                        >\n                            Edit\n                    </button>\n                        <button\n                            type=\"button\"\n                            onClick={() => {\n                                dispatch(deletePostLoad(post.id));\n                                history.push('/');\n                            }}\n                            className=\"btn btn-danger rounded pr-3 pl-3\"\n                        >\n                            Delete\n                    </button>\n                    </div>\n                </div>\n            </div>\n    )\n}\n\nexport default withRouter(FullPost);","import React from 'react';\nimport { withRouter } from 'react-router-dom/cjs/react-router-dom.min';\nimport EditPost from '../components/EditPost';\nimport FullPost from '../components/FullPost';\nimport { useSelector } from 'react-redux';\n\nfunction PostList(props) {\n    const postID = props.match ? props.match.params.id : -1;\n    const singlePost = useSelector(state => state.blogReducer.singlePost)\n    if (postID) {\n        return (\n            <div>\n                { singlePost.isEdited ?\n                    <EditPost\n                        post={singlePost}\n                    /> :\n                    <FullPost />\n                }\n\n            </div>\n        );\n    }\n    else {\n        return <div>loading</div>\n    }\n}\n\nexport default withRouter(PostList);","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link } from \"react-router-dom\";\nimport { deleteAllPosts } from '../redux/actions'\n\nfunction DeleteAllPosts() {\n\n    const dispatch = useDispatch();\n    const handleDeleteAllPosts = () => {\n        dispatch(deleteAllPosts());\n    }\n    return (\n        <Link onClick={handleDeleteAllPosts} className='nav-link cursor-style '>Delete All Posts</Link>\n    )\n}\n\nexport default DeleteAllPosts;","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { Link } from \"react-router-dom\";\nimport DeleteAllPosts from '../components/DeleteAllPosts';\n\n\nfunction Header(props) {\n\n    return (\n        <nav className='navbar navbar-expand-sm bg-info navbar-dark fixed-top' >\n            <Link to='/' className='navbar-brand cursor-style'>Blog App Home</Link>\n            <ul className='nav navbar-nav'>\n                <li className='nav-item'>\n                    {props.location.pathname === '/' && <DeleteAllPosts />}\n                </li>\n            </ul>\n        </nav>\n    )\n}\n\n\n\nexport default withRouter(Header);","import logo from './logo.svg';\nimport './App.css';\nimport React from 'react'\nimport App from './App';\nimport Post from './components/Post';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Fallback from '../src/FallBack';\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    withRouter\n  } from \"react-router-dom\";\nimport FullPost from './components/FullPost';\nimport PostList from './containers/postList';\nimport Header from './components/Header';\nfunction Routes() {\n\nconst isError = useSelector(state => state.blogReducer.isError)\n  \n    \n    if(isError) {\n        return <Fallback/>\n      }\n  \n  return (\n\n    <div className=\"App\">\n      <Router>\n       <Header />\n        <Switch>\n          <Route exact path=\"/\"><App/></Route>\n          <Route exact path=\"/FullPost/:id\"><PostList/></Route>\n        </Switch>\n      </Router>\n    </div>\n    \n   \n  );\n}\n\nexport default Routes; \n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport reducers from './redux/reducers'\nimport thunk from '../node_modules/redux-thunk';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport Routes from './Routes';\n\n\n\nReactDOM.render(<Provider store={createStore(reducers,applyMiddleware(thunk))}>\n <Router>\n<Routes />\n</Router>\n</Provider>, document.getElementById('root'));"],"sourceRoot":""}